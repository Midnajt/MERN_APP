=== SEKCJA 1️⃣ ===

    💥MERN = {
        MongoDB,
        Express,
        React,
        Node
    }

    client (browser) wysyła request do servera <=> serwer zwraca response do clienta

=== SEKCJA 2️⃣ ===


    💥Backend:
        ◽ REST API (Representational State Transfer), poplarniejsze.
            - ścieżki url z żądaniami HTTP z GET, POST, PATCH, DELETE.  wszystko jest traktowane jako zasób (np. użytkownicy, zdjęcia, artykuły). Każdy zasób ma unikalny URI (Uniform Resource Identifier). GET: Pobiera zasób. POST: Tworzy nowy zasób. PUT: Aktualizuje istniejący zasób. DELETE: Usuwa zasób.
            - endpointy trigerujące różne akcje.
        ◽ GraphQL API
            - jeden URL, zwykle POST, zawiera query.
            - używa query expression zamiast HTTP request.
            - wymaga nauczenia się jeżyka do tworzenia query.

        Oba podejścia egzekwują kod po stronie serwera.

    💥Dwa sposoby łączenia Node z react:
        ◽ Serwer przetrzymuje Node API + React SPA na jednej domenie.
            - requesty które nie targetują API routes zwracają React SPA.
        ◽ Jeden serwer do Frontendu, drugi do Backend Api.
            - Nodex/Express przyjmuje requesty.
            - React SPA na drugim serwerze.

        ◽ Niezależnie od wyboru, frontend zawsze łączy się w ten sam sposób z backendem

        *Trzeci sposób: Server-side rendered Pages (SRP)
        ◽ Komponenty generowane przez serwer.

    💥 ZAPAMIĘTAJ

        ➡ Zwraca json
        app.get('/products', (req, res, next) => {
            res.status(200).json({ products: DUMMY_PRODUCTS });
        });

        ⬅Odbiera json
        useEffect(() => {
            const fetchProducts = async () => {
                setIsLoading(true);
                const response = await fetch('http://przykladowe_url/products');

                const responseData = await response.json();

                setLoadedProducts(responseData.products);
                setIsLoading(false);
            };

            fetchProducts();
        }, []);

=== SEKCJA 3️⃣ ===

    💥 Planowanie
        1. Pomysł na aplikację lub problem, który można rozwiązać aplikacją.
            - Aplikacja do udostępniania odwiedzonych miejsc wraz z obrazami i opisem.
            - Inni użytkownicy mogą przeglądać miejsca odwiedzone przez danego/klikniętego użytkownika.
        2. Stworzenie projektu.
            - CRUD
        3. Rozplanuj obsługę danych, które będa obsługiwane.
            - Wczytywanie obrazów oraz walidacja danych.
            - Różne widoki.
            - Autoryzacja.
        4. Zaplanuj endpointy i strony lub komponenty.











🛠 *Skup się na obsłudze css oraz tagów <img/>
🛠 Zrób/znajdź ściągawkę do headersów w http requestach.
🛠 Naucz się narzędzia do tworzenia projektów aplikacji/frontendu/stron www (skatch app, figma?).
🛠 Framer naucz się go porządnie.
